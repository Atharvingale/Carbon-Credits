Nice — below is a **copy-ready, step-by-step guide** to build the **pages** for the early-phase MVP (Login/Signup, Wallet Connect, User Dashboard, Admin Dashboard + minting endpoint). I assume React for frontend, Supabase for auth + DB, and Solana (Phantom) for wallet + SPL minting. I also include minimal server code for admin minting. Follow the steps in order.

---

# Prerequisites

1. Node.js & npm/yarn installed.
2. A Supabase project created (get `SUPABASE_URL`, `SUPABASE_ANON_KEY`, and a **SERVICE ROLE** key for server-side operations).
3. A Solana RPC URL for devnet/mainnet (for development use devnet: `https://api.devnet.solana.com`).
4. Phantom (or other Solana wallet) installed in your browser for testing.
5. Recommended packages (install as you follow the pages): see each step below.

---

# ENV variables (example names)

```
# frontend (only)
REACT_APP_SUPABASE_URL=...
REACT_APP_SUPABASE_ANON_KEY=...
REACT_APP_SOLANA_RPC_URL=https://api.devnet.solana.com

# server (never expose)
SUPABASE_URL=...
SUPABASE_SERVICE_ROLE_KEY=...        # server only
SOLANA_RPC_URL=https://api.devnet.solana.com
SOLANA_PAYER_SECRET=...              # base58 string OR JSON array of secret key numbers
```

---

# File / Page structure (suggested)

```
src/
  pages/
    Landing.jsx
    Signup.jsx
    Login.jsx
    Dashboard.jsx          // user dashboard (wallet + tokens)
    AdminDashboard.jsx     // admin verify + mint UI
  components/
    WalletProviderWrapper.jsx
    ConnectWallet.jsx
    TokenList.jsx
  lib/
    supabaseClient.js
    solana.js               // small helpers for token parsing
server/
  api/
    mint.js                 // serverless function / express endpoint for admin minting
```

---

# Step 1 — Initialize project & install packages

Frontend:

```
npx create-react-app blue-carbon-mrv
cd blue-carbon-mrv

# frontend deps
npm install @supabase/supabase-js @solana/wallet-adapter-react @solana/wallet-adapter-wallets \
  @solana/wallet-adapter-react-ui @solana/wallet-adapter-base @solana/web3.js
```

Server (for minting endpoint):

```
# in project root or separate server folder
npm init -y
npm install express @solana/web3.js @solana/spl-token bs58 @supabase/supabase-js jsonwebtoken
```

> Use Solana wallet adapter for React to manage wallet connections. ([Solana][1], [CodeSandbox][2])

---

# Step 2 — Supabase client (lib/supabaseClient.js)

Create a singleton supabase client used throughout the frontend:

```js
// src/lib/supabaseClient.js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
```

**DB note**: create a `profiles` table in Supabase with columns: `id` (uuid, primary, matches auth.user.id), `email`, `role` ('user' or 'admin'), `created_at`. Add any extra metadata there. Use RLS to protect rows. ([Supabase][3])

Example `profiles` insert after signup:

```js
// after signUp success:
await supabase.from('profiles').insert([{ id: user.id, email, role: 'user' }]);
```

---

# Step 3 — Pages: Signup and Login

**Signup.jsx**: sign up user via Supabase (email/password) and create `profiles` row.

Important (high-level code):

```jsx
// src/pages/Signup.jsx (outline)
import React, { useState } from 'react';
import { supabase } from '../lib/supabaseClient';
import { useNavigate } from 'react-router-dom';

export default function Signup() {
  const [email,setEmail]=useState('');
  const [password,setPassword]=useState('');
  const navigate = useNavigate();

  const handleSignup = async () => {
    const { data, error } = await supabase.auth.signUp({ email, password });
    if (error) return alert(error.message);
    // create profile row (data.user.id)
    await supabase.from('profiles').insert([{ id: data.user.id, email, role: 'user' }]);
    // navigate to dashboard or ask user to confirm email depending on your settings
    navigate('/dashboard');
  };

  return (
    // simple form with email/password and Sign Up button that calls handleSignup
    <div>...signup form...</div>
  );
}
```

**Login.jsx**: sign-in using Supabase and store session (supabase client handles tokens). Use `signInWithPassword` (v2) or `signIn` depending on SDK version. Supabase issues JWTs for sessions. ([Supabase][4])

---

# Step 4 — Wallet Provider wrapper

Wrap your app with connection & wallet providers so any page can access `useWallet()`.

```jsx
// src/components/WalletProviderWrapper.jsx
import React, { useMemo } from 'react';
import { clusterApiUrl, Connection } from '@solana/web3.js';
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';
import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';
import { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets';

export default function WalletProviderWrapper({ children }) {
  const endpoint = process.env.REACT_APP_SOLANA_RPC_URL || clusterApiUrl('devnet');

  const wallets = useMemo(() => [ new PhantomWalletAdapter() ], []);
  return (
    <ConnectionProvider endpoint={endpoint}>
      <WalletProvider wallets={wallets} autoConnect={false}>
        <WalletModalProvider>
          {children}
        </WalletModalProvider>
      </WalletProvider>
    </ConnectionProvider>
  );
}
```

Place this wrapper at top level (index.js or App.js). Use the ready-made `<WalletMultiButton />` from `@solana/wallet-adapter-react-ui` for a connect button. ([Solana][1], [CodeSandbox][2])

---

# Step 5 — ConnectWallet component

A minimal component that shows Connect button and connected wallet address.

```jsx
// src/components/ConnectWallet.jsx
import React from 'react';
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';
import '@solana/wallet-adapter-react-ui/styles.css';

export default function ConnectWallet() {
  return <WalletMultiButton />;
}
```

Place `ConnectWallet` on the Landing page and Dashboard page.

---

# Step 6 — Dashboard (User) — fetching SOL & SPL token balances

Key ideas:

* Use `useWallet()` to get `publicKey`.
* Use connection (from `useConnection()`) to call `getBalance` and `getParsedTokenAccountsByOwner` to list SPL tokens.

Example snippet:

```jsx
// src/pages/Dashboard.jsx (core)
import React, { useEffect, useState } from 'react';
import { useWallet, useConnection } from '@solana/wallet-adapter-react';
import { TOKEN_PROGRAM_ID } from '@solana/spl-token';

function Dashboard() {
  const { publicKey } = useWallet();
  const { connection } = useConnection();
  const [solBalance, setSolBalance] = useState(0);
  const [tokens, setTokens] = useState([]);

  useEffect(() => {
    if (!publicKey) return;
    (async () => {
      const lamports = await connection.getBalance(publicKey);
      setSolBalance(lamports / 1e9);

      const tokenAccounts = await connection.getParsedTokenAccountsByOwner(publicKey, { programId: TOKEN_PROGRAM_ID });
      const parsed = tokenAccounts.value.map(ta => {
        const info = ta.account.data.parsed.info;
        return {
          mint: info.mint,
          amount: info.tokenAmount.uiAmount,
          decimals: info.tokenAmount.decimals
        };
      });
      setTokens(parsed);
    })();
  }, [publicKey, connection]);

  return (
    <div>
      <h3>Wallet: {publicKey?.toBase58()}</h3>
      <div>SOL: {solBalance}</div>
      <h4>Tokens</h4>
      <ul>{tokens.map(t => <li key={t.mint}>{t.mint} — {t.amount}</li>)}</ul>
    </div>
  );
}
```

This uses connection's `getParsedTokenAccountsByOwner` to list tokens (works well for SPL tokens). ([Solana][1])

---

# Step 7 — Admin Dashboard (UI)

Create a simple admin page with:

* A list/table of pending projects (pulled from `projects` table in Supabase).
* For each approved project, a button/form to **mint** tokens to an NGO wallet address (calls server endpoint `/api/mint`).

Admin UI (outline):

```jsx
// src/pages/AdminDashboard.jsx (outline)
import React, { useEffect, useState } from 'react';
import { supabase } from '../lib/supabaseClient';

function AdminDashboard() {
  const [projects, setProjects] = useState([]);

  useEffect(() => {
    (async () => {
      const { data } = await supabase.from('projects').select('*').eq('status', 'pending');
      setProjects(data || []);
    })();
  }, []);

  const handleMint = async (projectId, recipientWallet, amount) => {
    // call server endpoint with admin JWT in Authorization header
    const jwt = (await supabase.auth.getSession()).data.session.access_token;
    await fetch('/api/mint', {
      method: 'POST',
      headers: { 'Content-Type':'application/json', 'Authorization': `Bearer ${jwt}` },
      body: JSON.stringify({ projectId, recipientWallet, amount })
    });
    // refresh UI
  };

  return ( /* UI with list and mint form calling handleMint */ );
}
```

---

# Step 8 — Server endpoint for minting (server/api/mint.js)

**Security**: This endpoint must be server-side only. It must verify the caller is an admin (via Supabase user info/role). It uses the `SOLANA_PAYER_SECRET` to sign transactions and `@solana/spl-token` for token creation + minting. Below is a minimal Express endpoint.

```js
// server/api/mint.js (Express style)
import express from 'express';
import { createClient } from '@supabase/supabase-js';
import bs58 from 'bs58';
import { Connection, Keypair, PublicKey } from '@solana/web3.js';
import { createMint, getOrCreateAssociatedTokenAccount, mintTo } from '@solana/spl-token';
import jwt from 'jsonwebtoken';

const app = express();
app.use(express.json());

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);
const connection = new Connection(process.env.SOLANA_RPC_URL || 'https://api.devnet.solana.com', 'confirmed');

// Load payer keypair (support base58 or JSON array)
let payer;
if (process.env.SOLANA_PAYER_SECRET.startsWith('[')) {
  payer = Keypair.fromSecretKey(Uint8Array.from(JSON.parse(process.env.SOLANA_PAYER_SECRET)));
} else {
  payer = Keypair.fromSecretKey(bs58.decode(process.env.SOLANA_PAYER_SECRET));
}

app.post('/mint', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).send('No token');

    // Verify token & extract user id — use supabase auth helper or decode+check
    const { data: { user } } = await supabase.auth.getUser(token);
    if (!user) return res.status(403).send('Invalid user');
    const { data: profile } = await supabase.from('profiles').select('role').eq('id', user.id).single();
    if (!profile || profile.role !== 'admin') return res.status(403).send('Must be admin');

    // payload
    const { recipientWallet, amount, decimals = 0 } = req.body;
    const recipient = new PublicKey(recipientWallet);

    // Create mint (or reuse existing project mint — this code creates a brand new mint)
    const mint = await createMint(connection, payer, payer.publicKey, null, decimals);

    // Ensure recipient's associated token account
    const recipientTokenAccount = await getOrCreateAssociatedTokenAccount(connection, payer, mint, recipient);

    // Mint tokens (amount must be integer adjusted for decimals)
    const amountToMint = BigInt(amount) * BigInt(Math.pow(10, decimals));
    const sig = await mintTo(connection, payer, mint, recipientTokenAccount.address, payer.publicKey, amountToMint);

    // Store on Supabase tokens table (mint address, project link, assigned wallet)
    await supabase.from('tokens').insert([{ mint: mint.toBase58(), recipient: recipientWallet, amount, minted_tx: sig }]);

    res.json({ mint: mint.toBase58(), tx: sig });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
});

app.listen(3000, ()=> console.log('mint service running'));
```

Notes:

* In practice you may create one mint per project (store mint address in `projects` table), and only call `mintTo` later. The simplified example creates a new mint. Use `createMint` / `mintTo` from `@solana/spl-token`. ([Solana][5], [Chainstack][6])
* Keep `SUPABASE_SERVICE_ROLE_KEY` and `SOLANA_PAYER_SECRET` on server only.

---

# Step 9 — Transaction confirmation & recording

* After minting, your server returns the transaction signature. Display it in Admin UI and in user dashboard (if tokens assigned to a connected wallet). Provide a Solana Explorer URL for verification (e.g., `https://explorer.solana.com/tx/<SIG>?cluster=devnet`).
* Also store a record of the mint / tx in Supabase (`tokens` or `registry` table) for auditability.

---

# Step 10 — Supabase Row Level Security (RLS) & role checks

* Use a `profiles.role` column (`user` / `admin`). Enforce RLS so only admins can read/write `projects.status` etc. Use Supabase RLS policies to restrict access. (See Supabase RLS docs.) ([Supabase][3], [DEV Community][7])

Example policy (SQL editor):

```sql
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- allow users to update their own profile:
CREATE POLICY "Users can modify own profile" ON public.profiles
FOR UPDATE USING (auth.uid() = id);
```

---

# Step 11 — Test flow (local / devnet)

1. Start server endpoint (port 3000). Set `SOLANA_PAYER_SECRET` to a devnet payer (airdrop SOL into it via `solana airdrop 2 <pubkey> --url https://api.devnet.solana.com`).
2. Run frontend `npm start`. Sign up a user and an admin (set `role: 'admin'` manually in `profiles` for admin during testing).
3. User: login → connect Phantom (set to devnet).
4. Admin: login → use Admin Dashboard → mint tokens to user wallet → user sees SPL token in Dashboard.
5. Verify tx on Solana Explorer (devnet). ([Solana][1], [Chainstack][6])

---

# Security & best practices (short)

* Never expose the Supabase **service role** key or `SOLANA_PAYER_SECRET` in client code. Use server functions.
* Verify admin role server-side before allowing minting.
* Use RLS policies for database security. ([Supabase][3])
* For production: consider creating one mint per project instead of creating a new mint for each issuance. Manage retirements by tracking tokens on-chain and in Supabase.

---

# Helpful references

* Solana wallet-adapter React guide (connect wallets): official Solana docs. ([Solana][1])
* Supabase JWT & sessions (how tokens work & server-side checks). ([Supabase][4])
* SPL token basics / token minting on Solana. ([Solana][5], [Chainstack][6])
* Supabase Row Level Security & best practices. ([Supabase][3], [DEV Community][7])

---

If you want, I can now:

* Paste **complete ready-to-run code files** for each page (Signup, Login, Dashboard, Admin) and the server mint endpoint, or
* Produce a **copyable README** with the exact commands and deploy instructions (Vercel / Render) — tell me which and I’ll drop full files.

[1]: https://solana.com/developers/cookbook/wallets/connect-wallet-react?utm_source=chatgpt.com "How to Connect a Wallet with React"
[2]: https://codesandbox.io/examples/package/%40solana/wallet-adapter-react?utm_source=chatgpt.com "solana/wallet-adapter-react examples"
[3]: https://supabase.com/docs/guides/database/postgres/row-level-security?utm_source=chatgpt.com "Row Level Security | Supabase Docs"
[4]: https://supabase.com/docs/guides/auth/jwts?utm_source=chatgpt.com "JWTs | Supabase Docs"
[5]: https://solana.com/developers/courses/tokens-and-nfts/token-program?utm_source=chatgpt.com "Create Tokens With The Token Program"
[6]: https://docs.chainstack.com/recipes/minting-spl-tokens-with-solana-web3js?utm_source=chatgpt.com "Minting SPL tokens with solana-web3.js"
[7]: https://dev.to/shahidkhans/setting-up-row-level-security-in-supabase-user-and-admin-2ac1?utm_source=chatgpt.com "Setting Up Row-Level Security in Supabase User and ..."
